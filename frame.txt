Frame format:  
​​
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-------+-+-------------+-------------------------------+
     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
     |N|V|V|V|       |S|             |   (if payload len==126/127)   |
     | |1|2|3|       |K|             |                               |
     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
     |     Extended payload length continued, if payload len == 127  |
     + - - - - - - - - - - - - - - - +-------------------------------+
     |                               |Masking-key, if MASK set to 1  |
     +-------------------------------+-------------------------------+
     | Masking-key (continued)       |          Payload Data         |
     +-------------------------------- - - - - - - - - - - - - - - - +
     :                     Payload Data continued ...                :
     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     |                     Payload Data continued ...                |
     +---------------------------------------------------------------+


Example of "ciao"
10000001100001001101011110001010001111100110110101101000101110011010100010

[1] 		Bit 0: 1 Message delivered, 0 keep listening
[000] 		Bit 1,2,3: Reserved bits
[0001]		Bit 4,5,6,7: The opcode field defines how to interpret the payload data: 0x0 for continuation, 0x1 for text (which is always encoded in UTF-8), 0x2 for binary, and other so-called "control codes" that will be discussed later. In this version of WebSockets, 0x3 to 0x7 and 0xB to 0xF have no meaning.
[1]			Bit 8: The MASK bit simply tells whether the message is encoded.
[0000100]	Bit 9,10,11,12,13,14,15: Payload length (in this case 4)
				1) Read bits 9-15 (inclusive) and interpret that as an unsigned integer. If it's 125 or less, then that's the length; you're done. If it's 126, go to step 2. If it's 127, go to step 3.
				
				2) Read the next 16 bits and interpret those as an unsigned integer. You're done.
				
				3) Read the next 64 bits and interpret those as an unsigned integer (The most significant bit MUST be 0). You're done.
[11010111100010100011111001101101] 32 Bit masking key
[01101000101110011010100010000000] Data to decode 



Another example of "ciao" (mask changed):
(129)10000001 (132)10000100 (185)10111001 (172)10101100 (246)11110110 (173)10101101 (218)11011010 (197)11000101 (151)10010111 (194)11000010

FIN: 1 = 1
RSV1: 0 = 0
RSV2: 0 = 0
RSV3: 0 = 0
OPCODE: 0001 = 1
MASK: 1 = 1
LENGTH: 0000100 = 4
MASK KEY = 185,172,246,173
CONTENT = 218, 197, 151, 194


218 ^ 185 = 99 -> "c"
197 ^ 172 = 105 -> "i"
151 ^ 246 = 97 -> "a"
194 ^ 173 = 111 -> "o"


